// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

model User {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  user_name           String
  tag                 String       @unique @default(cuid())
  email               String       @unique
  password            String?
  github_id           String?
  discord_id          String?
  google_id           String?
  image_url           String?
  banner_url          String?
  bio                 String?
  Post                Post[]
  Comment             Comment[]
  Like                Like[]
  Save                Save[]
  Membership          Membership[]
  premium             Boolean      @default(false)
  SubscriptionEndDate DateTime
  created_at          DateTime     @default(now())
  followers           Follow[]     @relation("following")
  following           Follow[]     @relation("follower")
}

model Post {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  content         String?
  medias          String[]
  likes_number    Int        @default(0)
  saves_number    Int        @default(0)
  share_number    Int        @default(0)
  comments_number Int        @default(0)
  Author          User       @relation(fields: [userId], references: [id])
  userId          String     @db.ObjectId
  Comment         Comment[]
  Community       Community? @relation(fields: [communityId], references: [id])
  communityId     String?    @db.ObjectId
  created_at      DateTime   @default(now())
  Like            Like[]
  Save            Save[]
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String?
  Author     User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  Post       Post     @relation(fields: [postId], references: [id])
  postId     String   @db.ObjectId
  medias     String[]
  created_at DateTime @default(now())
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  Post   Post   @relation(fields: [postId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
  postId String @db.ObjectId
  userId String @db.ObjectId
}

model Save {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  Post   Post   @relation(fields: [postId], references: [id])
  User   User   @relation(fields: [userId], references: [id])
  postId String @db.ObjectId
  userId String @db.ObjectId
}

model Community {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  image      String?
  banner     String?
  Post       Post[]
  Membership Membership[]
  created_at DateTime     @default(now())
}

model Membership {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  User      User      @relation(fields: [userId], references: [id])
  Community Community @relation(fields: [communityId], references: [id])
  role      Role      @default(USER)

  userId      String @db.ObjectId
  communityId String @db.ObjectId
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())

  follower  User @relation(fields: [followerId], references: [id], name: "follower")
  following User @relation(fields: [followingId], references: [id], name: "following")
}
